#include "menu.h"
#include "xor.hpp"

Menu m; Menu::Cheats C; DWORD S=D3DCOLOR_ARGB(255,233,233,233), E=D3DCOLOR_ARGB(255,220,220,220), B=D3DCOLOR_ARGB(255,195,195,195), T=D3DCOLOR_ARGB(255,255,255,255), S2=D3DCOLOR_ARGB(255,220,220,220), O=D3DCOLOR_ARGB(255,50,50,50), COff=D3DCOLOR_ARGB(255,30,30,30); Menu::Menu() { this->menuInfo={50,150,400,true}; this->itemInfo={0,0}; this->tabInfo={0,0}; this->scrollInfo={7,0}; this->colorInfo={0,0}; } void Menu::AddTab(string n) { this->tabs[this->tabInfo.num].name=n; this->tabs[this->tabInfo.num].pos=itemInfo.num; this->tabInfo.num++; } void Menu::AddItem(string n, string* d, int m, int v) { this->items[this->itemInfo.num].name=n; this->items[this->itemInfo.num].display=d; this->items[this->itemInfo.num].max=m-1; this->items[this->itemInfo.num].value=v; this->itemInfo.num++; } string F; void Menu::Render(HWND g) { if (GetAsyncKeyState(VK_F7) & 1) this->menuInfo.isShown=!this->IsShown(); if (!this->IsShown()) return; int x=this->menuInfo.x, y=this->menuInfo.y, w=this->menuInfo.w, h=(this->scrollInfo.num*16)+8, th=h/this->tabInfo.num, tw=w/4; GetCursorPos(&this->c.pos); ScreenToClient(g,&this->c.pos); this->c.pos.x+=9; this->MouseSetup(); this->KeyboardNavigation(); this->DragMenu(x,y,w,20); draw.Rectangle(x,y,w,20,S,E,B); draw.Text(x+w/2,y+2,this->menuInfo.title,O,false,TextAlignment::kCenter); draw.Rectangle(x+tw+1,y+21,w-tw-1,h,S,E,B); this->DrawSelection(x+tw+5,y+20+(this->itemInfo.index-this->scrollInfo.index)*16+6,w-tw-20); this->DrawTabs(x,y+21,tw,th); this->DrawItems(x+tw+10,y+20,w); this->DrawScrollBar(x+w-10,y+27,h-15); this->menuInfo.color=D3DCOLOR_RGBA(0,120,0,255); if (m.items[17].value==1) { S=D3DCOLOR_ARGB(255,33,33,33); E=D3DCOLOR_ARGB(255,20,20,20); B=D3DCOLOR_ARGB(255,0,0,0); T=D3DCOLOR_ARGB(255,255,255,255); S2=D3DCOLOR_ARGB(255,13,13,13); O=D3DCOLOR_ARGB(255,190,190,190); COff=D3DCOLOR_ARGB(0,25,25,25); } else { S=D3DCOLOR_ARGB(255,233,233,233); E=D3DCOLOR_ARGB(255,220,220,220); B=D3DCOLOR_ARGB(255,195,195,195); T=D3DCOLOR_ARGB(255,255,255,255); S2=D3DCOLOR_ARGB(255,220,220,220); O=D3DCOLOR_ARGB(255,50,50,50); COff=D3DCOLOR_ARGB(255,30,30,30); } } void Menu::MouseSetup() { this->c.isLClicked=GetAsyncKeyState(VK_LBUTTON)&1; this->c.isRClicked=GetAsyncKeyState(VK_RBUTTON)&1; this->c.isHolding=GetAsyncKeyState(VK_LBUTTON); } void Menu::KeyboardNavigation() { int i=this->FirstTabIndex()+this->itemInfo.index; if (GetAsyncKeyState(VK_UP)&1 && this->itemInfo.index>0) { if (GetAsyncKeyState(VK_LSHIFT)<0) { this->Update(); } else { if (this->itemInfo.index<this->scrollInfo.index+1) this->scrollInfo.index--; this->itemInfo.index--; } } if (GetAsyncKeyState(VK_DOWN)&1 && this->itemInfo.index<this->NumTabItems()-1) { if (GetAsyncKeyState(VK_LSHIFT)<0) { this->itemInfo.index=this->NumTabItems()-1; if (this->NumScrollItems()>0) this->scrollInfo.index=this->NumScrollItems(); } else { if (this->itemInfo.index>this->scrollInfo.index+(this->scrollInfo.num-2)) this->scrollInfo.index++; this->itemInfo.index++; } } if (GetAsyncKeyState(VK_LEFT)&1) { if (GetAsyncKeyState(VK_LSHIFT)<0) { if (this->tabInfo.index>0) { this->tabInfo.index--; this->Update(); } } else if (GetAsyncKeyState(VK_CONTROL)<0) { if (this->colorInfo.index>0) this->colorInfo.index--; } else { if (this->items[i].value>0 && this->itemInfo.index>=0) this->items[i].value--; } } if (GetAsyncKeyState(VK_RIGHT)&1) { if (GetAsyncKeyState(VK_LSHIFT)<0) { if (this->tabInfo.index<this->tabInfo.num-1) { this->tabInfo.index++; this->Update(); } } else if (GetAsyncKeyState(VK_CONTROL)<0) { if (this->colorInfo.index<this->colorInfo.num-1) this->colorInfo.index++; } else if (this->items[i].value<this->items[i].max && this->itemInfo.index>=0) this->items[i].value++; } } void Menu::DrawSelection(int x, int y, int w) { if (this->itemInfo.index>=0) draw.Rectangle(x+1,y+1,w-1,13,S2); } void Menu::DrawTabs(int x, int y, int w, int h) { for (int i=0;i<this->tabInfo.num;i++) { D3DCOLOR c=this->tabInfo.index==i?this->menuInfo.color:O; if (this->tabInfo.index==i) draw.Rectangle(x,y+i*h,w,h,E,S,B); else draw.Rectangle(x,y+i*h,w,h,S,E,B); if (this->IsMouseOver(x,y+(i*h),w,h) && this->tabInfo.index!=i) { c+=COff; if (this->IsLClicked()) { this->tabInfo.index=i; this->Update(); } } draw.Text(x+w/2,y+(i*h)+(h/2)-8,this->tabs[i].name,c,false,TextAlignment::kCenter); } } void Menu::MouseNavigation(int i) { if (this->IsLClicked()) { if (this->items[i].value<this->items[i].max) this->items[i].value++; else this->items[i].value=0; } if (this->IsRClicked()) { if (this->items[i].value>0) this->items[i].value--; else this->items[i].value=this->items[i].max; } } void Menu::DrawItems(int x, int y, int w) { int o=y; for (int i=this->FirstScrollIndex();i<=this->LastScrollIndex();i++) { D3DCOLOR c=this->items[i].value>0?this->menuInfo.color:O; draw.Text(x,o+5,this->items[i].name.c_str(),c); draw.Text(x+w-w/4-30,o+5,this->items[i].display[this->items[i].value],c,false,TextAlignment::kRight); if (this->IsMouseOver(x-5,o+5,w-w/4-20,16)) { this->itemInfo.index=i-this->FirstScrollIndex()+this->scrollInfo.index; this->MouseNavigation(i); } o+=16; } } void Menu::DrawColors(int x, int y, int w, int h) { D3DCOLOR cs[]={D3DCOLOR_ARGB(255,255,0,70),D3DCOLOR_ARGB(255,0,120,210),D3DCOLOR_ARGB(255,0,210,70),D3DCOLOR_ARGB(255,255,240,0),D3DCOLOR_ARGB(255,255,120,0)}; this->colorInfo.num=GetSizeOf(cs); x+=w-(this->colorInfo.num*15); for (int i=0;i<this->colorInfo.num;i++) { if (this->colorInfo.index==i) draw.Rectangle(x+(i*15)-1,y+h-1,10,10,cs[i],NULL,B); else { if (this->IsMouseOver(x+(i*15),y+h-1,10,10)) { if (this->IsLClicked()) this->colorInfo.index=i; } draw.Rectangle(x+(i*15),y+h,10,10,cs[i],NULL,NULL); } } } void Menu::DrawScrollBar(int x, int y, int h) { draw.Rectangle(x,y,10,h,S,E,B); draw.Rectangle(x+1,y+1,8,h-2,S2,NULL,B); } void Menu::Update() { // Placeholder for update functionality. } int Menu::FirstTabIndex() { return this->tabInfo.index; } int Menu::NumTabItems() { return this->itemInfo.num; } int Menu::NumScrollItems() { return this->itemInfo.num-this->scrollInfo.index; } int Menu::FirstScrollIndex() { return this->scrollInfo.index; } int Menu::LastScrollIndex() { return this->scrollInfo.index+this->scrollInfo.num-1; } bool Menu::IsMouseOver(int x, int y, int w, int h) { return this->c.pos.x>x && this->c.pos.x<x+w && this->c.pos.y>y && this->c.pos.y<y+h; } bool Menu::IsShown() { return this->menuInfo.isShown; } bool Menu::IsLClicked() { return this->c.isLClicked; } bool Menu::IsRClicked() { return this->c.isRClicked; }

