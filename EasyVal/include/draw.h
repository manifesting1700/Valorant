#ifndef __DRAW_H__ #define __DRAW_H__ #include <string> #include <d3d9.h> #include <d3dx9.h> #pragma comment(lib, "d3d9.lib") #pragma comment(lib, "d3dx9.lib") using namespace std; enum _A { _B, _C, _D }; class _E { public: _E() { _F = false; } IDirect3DDevice9Ex* _G; LPD3DXFONT _H; void _I() { this->_F = true; } bool _J() { return this->_F; } int _K(string _L); void _M(int _N, int _O, string _P, D3DCOLOR _Q, bool _R = false, _A _S = _A::_B); void _T(float _U, float _V, float _W, float _X, D3DCOLOR _Y); void _Z(float _a, float _b, float _c, float _d, D3DCOLOR _e); void _f(float _g, float _h, float _i, float _j, D3DCOLOR _k, D3DCOLOR _l = NULL, D3DCOLOR _m = NULL); void _n(std::string& _o); IDirect3DDevice9Ex* _p() { return this->_G; } private: struct _q { float _r, _s, _t, _u; D3DCOLOR _v; float _w, _x; static DWORD _y; }; bool _F; }; #define _z(_A) (255 * _A) / 100 #define _A0(_B) D3DCOLOR_ARGB(_z(_B), 255, 0, 0) #define _A1(_C) D3DCOLOR_ARGB(_z(_C), 0, 255, 0) #define _A2(_D) D3DCOLOR_ARGB(_z(_D), 0, 0, 255) #define _A3(_E) D3DCOLOR_ARGB(_z(_E), 255, 255, 0) #define _A4(_F) D3DCOLOR_ARGB(_z(_F), 255, 125, 0) #define _A5(_G) D3DCOLOR_ARGB(_z(_G), 255, 255, 255) #define _A6(_H) D3DCOLOR_ARGB(_z(_H), 0, 0, 0) extern _E _I1; #endif //__DRAW_H__
