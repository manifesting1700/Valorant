#ifndef _M_H_ #define _M_H_ #include <Windows.h> #include <string> #include "D.h" #include "I.h" using namespace std; #define S(a) sizeof(a)/sizeof(*a) class M { public: M(); struct C { C() { } struct E { int B, L, C; } e; struct A { int o, F, T, TS, TF, s; } a; struct M { int R; } m; struct MS { int d; } ms; }; void T(string n); void I(string n, string* d, int mx = 2, int v = 0); void H(string t) { i.t = t; } void R(HWND gw); bool S() { return i.s; } struct MI { string n; string* d; int v; int mx; } it[100]; private: void MS(); void MN(int i); void MNS(float x, float y, float w, float h); void KN(); void DS(int x, int y, int w); void DT(int x, int y, int w, int h); void DI(int x, int y, int w); void DSb(int x, int y, int h); void DC(int x, int y, int w, int h); void DM(int x, int y, int w, int h); struct CI { POINT p; POINT o; bool l; bool r; bool h; } c; struct MI { string t; int x; int y; int w; D3DCOLOR c; bool d; bool s; } i; struct II { int n; int idx; } ii, ti, si, ci; struct T { string n; int p; } t[8]; void U() { ii.idx = 0; si.idx = 0; } int FT() { return t[ti.idx].p; } int LT() { if (ti.n > ti.idx + 1) return t[ti.idx + 1].p - 1; else return ii.n - 1; } int N() { int n = 0; for (int i = this->FT(); i <= this->LT(); i++) n++; return n; } bool Hs() { return (this->N() > si.n); } int Nsi() { return (this->N() - si.n); } int Nshi() { return (this->Hs() ? (this->Nsi() - si.idx) : 0); } int FSI() { return (this->FT() + si.idx); } int LSI() { return (this->LT() - this->Nshi()); } bool IL() { return this->c.l; } bool IR() { return this->c.r; } bool IH() { return this->c.h; } bool MO(float x, float y, float w, float h) { return (c.p.x > x && c.p.x < x + w && c.p.y > y && c.p.y < y + h); } }; extern M m; extern M::C C; #endif //_M_H_
