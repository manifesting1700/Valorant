import cv2;from mss import mss;import numpy as np;import win32api,sys;import serial;import keyboard,threading;from mouse_instruct import MouseInstruct,DeviceNotFoundError;from ctypes import WinDLL;import time,json;from valclient.client import Client;user32,kernel32,shcore=(WinDLL("user32",use_last_error=True),WinDLL("kernel32",use_last_error=True),WinDLL("shcore",use_last_error=True),);shcore.SetProcessDpiAwareness(2);WIDTH,HEIGHT=[user32.GetSystemMetrics(0),user32.GetSystemMetrics(1)];ZONE=5;GRAB_ZONE=(int(WIDTH/2-ZONE),int(HEIGHT/2-ZONE),int(WIDTH/2+ZONE),int(HEIGHT/2+ZONE),);GRAB_ZONE_CENTER_X=(GRAB_ZONE[2]-GRAB_ZONE[0])/2;GRAB_ZONE_CENTER_Y=(GRAB_ZONE[3]-GRAB_ZONE[1])/2;def exiting():try:exec(type((lambda:0).__code__)(0,0,0,0,0,0,b'\x053',(),(),(),'', '',0,b''))except:try:sys.exit()except:raise SystemExit;cfg_path="config.json";def set_config(config):global cfg_path;cfg_path=config;return cfg_path;with open(cfg_path) as json_file:data=json.load(json_file);try:enable_aim=data['aimbot']["enable_aimbot"];enable_trigger=data['triggerbot']["enable_triggerbot"];enable_instalock=data['instantlocker']["enable_instantlocker"];except:exiting();def getMouse():try:mouse=MouseInstruct.getMouse();print("[+] Device found!")except DeviceNotFoundError as e:print(e);exiting();return mouse;arduino=getMouse();class aimbot:def __init__(self):global cfg_path;self.sct=mss();with open(cfg_path) as json_file:data=json.load(json_file);try:self.aimbot_hotkey=int(data['aimbot']["aimbot_hotkey"],16);self.experimental_filtering=data['aimbot']["experimental_filtering"];self.anti_astra=data["aimbot"]["anti_astra"];self.enable_rcs=data['aimbot']["enable_rcs"];self.x_fov=data['aimbot']["x_fov"];self.y_fov=data['aimbot']["y_fov"];self.cop=data['aimbot']["cop"];self.x_speed=float(data['aimbot']["x_speed"]);self.y_speed=float(data['aimbot']["y_speed"]);self.x_only=data["aimbot"]['x_only'];self.custom_yoffset=data["aimbot"]["custom_yoffset"];self.monitor_id=data["arduino_settings"]["monitor_id"];ardiuno_port=data['arduino_settings']["com_port"];arduino_serial=data['arduino_settings']["serial_id"];self.R,self.G,self.B=(250,100,250)except:exiting();self.screenshot=self.sct.monitors[self.monitor_id];self.roundedgrabx=int(self.x_fov);self.roundedgraby=int(self.y_fov);self.screenshot['left']=int((self.screenshot['width']/2)-(self.roundedgrabx/2));self.screenshot['top']=int((self.screenshot['height']/2)-(self.roundedgraby/2));self.screenshot['width']=self.roundedgrabx;self.screenshot['height']=self.roundedgraby;self.center_x=self.roundedgrabx/2;self.center_y=self.roundedgraby/2;if self.anti_astra is True:self.lower=np.array([140,111,160]);self.upper=np.array([148,154,194])else:self.lower=np.array([140,110,150]);self.upper=np.array([150,195,255]);self.purple=(150,119,179);self.hue_threshold=0;self.similarity_threshold=(0.82,0.85);if self.experimental_filtering is True:if self.cop==1:self.cop_ready=3;elif self.cop==2:self.cop_ready=(-1);elif self.cop==3:self.cop_ready=(-4)else:if self.cop==1:self.cop_ready=5;elif self.cop==2:self.cop_ready=3;elif self.cop==3:self.cop_ready=(-1);if self.custom_yoffset==0:pass;else:self.cop_ready=self.custom_yoffset;def get_similarity_map(self,image_hsv,target_hsv):delta=np.abs(image_hsv-target_hsv);delta[:,:,0]=np.minimum(delta[:,:,0],180-delta[:,:,0])/180;delta[:,:,1]/=255;delta[:,:,2]/=255;similarity=1-np.sqrt(np.sum(delta[:,:,:]**2,axis=2))/np.sqrt(3);mask=np.logical_and(delta[:,:,0]<=self.hue_threshold,np.logical_and(self.similarity_threshold[0]<=similarity,similarity<=self.similarity_threshold[1]));return np.where(mask,similarity,0);def run(self):if win32api.GetAsyncKeyState(self.aimbot_hotkey)<0:if self.experimental_filtering is True:frame=np.array(self.sct.grab(self.screenshot));roi=frame[int(self.center_y-self.roundedgraby/2):int(self.center_y+self.roundedgraby/2),int(self.center_x-self.roundedgrabx/2):int(self.center_x+self.roundedgrabx/2)];roi=cv2.cvtColor(roi,cv2.COLOR_BGR2HSV);roi=np.array(roi,dtype=np.float32);similarity_map=self.get_similarity_map(roi,self.purple);similarity_map=(similarity_map*255).astype(np.uint8);kernel=np.ones((3,3),np.uint8);dilated=cv2.dilate(similarity_map,kernel,iterations=5);thresh=cv2.threshold(dilated,60,255,cv2.THRESH_BINARY)[1];contours,hierarchy=cv2.findContours(thresh,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE);else:img=np.array(self.sct.grab(self.screenshot));hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV);mask=cv2.inRange(hsv,self.lower,self.upper);kernel=np.ones((3,3),np.uint8);dilated=cv2.dilate(mask,kernel,iterations=5);thresh=cv2.threshold(dilated,60,255,cv2.THRESH_BINARY)[1];contours,hierarchy=cv2.findContours(thresh,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE);if len(contours)!=0:M=cv2.moments(thresh);point_to_aim=(int(M["m10"]/M["m00"]),int(M["m01"]/M["m00"]));closestX=point_to_aim[0]+1;closestY=point_to_aim[1]-self.cop_ready;diff_x=closestX-self.center_x;diff_y=closestY-self.center_y;target_x=diff_x*self.x_speed;target_y=diff_y*self.y_speed;if self.x_only is True:target_y=0;if self.enable_rcs is True and win32api.GetAsyncKeyState(0x01)<0:time.sleep(0.001);target_y+=6;arduino.move(int(target_x),int(target_y));def starterino(self):try:while True:self.run();except Exception as e:print("An exception occurred in the thread:",e);class triggerbot:def __init__(self):global cfg_path;self.sct=mss();self.triggerbot=False;self.triggerbot_toggle=True;self.exit_program=False;self.toggle_lock=threading.Lock();with open(cfg_path) as json_file:data=json.load(json_file);try:self.keybind_toggle=int(data['triggerbot']["trigger_hotkey"],16);self.always_enabled=data['triggerbot']["always_enabled"];self.trigger_delay=data["triggerbot"]["trigger_delay"];self.base_delay=data["triggerbot"]["base_delay"];self.color_tolerance=data["triggerbot"]["color_tolerance"];self.monitor_id=data["arduino_settings"]["monitor_id"];self.R,self.G,self.B=(250,100,250)except:exiting();self.screenshot=self.sct.monitors[self.monitor_id];def cooldown(self):time.sleep(0.1);with self.toggle_lock:self.triggerbot_toggle=True;kernel32.Beep(440,75),kernel32.Beep(700,100)if self.triggerbot else kernel32.Beep(440,75),kernel32.Beep(200,100);def searcherino(self):frame=np.array(self.sct.grab(self.screenshot));img=frame[GRAB_ZONE[1]:GRAB_ZONE[3],GRAB_ZONE[0]:GRAB_ZONE[2]];pmap=np.array(img);pixels=pmap.reshape(-1,4);color_mask=(pixels[:,0]>self.R-self.color_tolerance)&(pixels[:,0]<self.R+self.color_tolerance)&(pixels[:,1]>self.G-self.color_tolerance)&(pixels[:,1]<self.G+self.color_tolerance)&(pixels[:,2]>self.B-self.color_tolerance)&(pixels[:,2]<self.B+self.color_tolerance);matching_pixels=pixels[color_mask];if self.triggerbot and len(matching_pixels)>0:delay_percentage=self.trigger_delay/100.0;actual_delay=self.base_delay+self.base_delay*delay_percentage;time.sleep(actual_delay);arduino.press();time.sleep(0.025);arduino.release();def program_starter(self):while True:if self.exit_program:break;self.searcherino();time.sleep(0.0001);def starterino(self):if self.always_enabled:self.triggerbot=True;threading.Thread(target=self.program_starter).start();while True:try:if self.exit_program:sys.exit();if keyboard.is_pressed("end"):self.exit_program=True;with self.toggle_lock:if self.triggerbot_toggle:self.triggerbot_toggle=False;self.triggerbot=not self.triggerbot;threading.Thread(target=self.cooldown).start();time.sleep(0.1);except:pass;def ending(self):self.exit_program=True;class insta_lock:def __init__(self):global cfg_path;with open(cfg_path) as json_file:data=json.load(json_file);try:self.riot_user=data['instantlocker']["username"];self.riot_pass=data['instantlocker']["password"];self.auto_lock_hotkey=data['instantlocker']["instalock_hotkey"];self.agent_choice=data['instantlocker']["agent"];except:exiting();client=Client(region="na");try:client.activate();client.fetch_presence();client.hard_login(self.riot_user,self.riot_pass);except:client.activate();client.fetch_presence();client.hard_login(self.riot_user,self.riot_pass);def auto_lock(self):while True:session_state=client.fetch_presence();for member in session_state["sessionLoopState"]:if member=="PREGAME":pregame_info=client.pregame_fetch();for slot in pregame_info["AllyTeam"]["Players"]:if slot["Subject"]==client.puuid:print("Locking in:",self.agent_choice);client.pregame_select_character(self.agent_choice);time.sleep(0.5);client.pregame_lock_character(self.agent_choice);time.sleep(2);if keyboard.is_pressed(self.auto_lock_hotkey):threading.Thread(target=self.auto_lock).start();break;time.sleep(1);def exit_insta(self):client.logout();insta_lock().exit_insta();aimbot=aimbot();triggerbot=triggerbot();insta_lock=insta_lock();if enable_aim:aimbot_thread=threading.Thread(target=aimbot.starterino);aimbot_thread.daemon=True;aimbot_thread.start();if enable_trigger:triggerbot_thread=threading.Thread(target=triggerbot.starterino);triggerbot_thread.daemon=True;triggerbot_thread.start();if enable_instalock:insta_lock_thread=threading.Thread(target=insta_lock.auto_lock);insta_lock_thread.daemon=True;insta_lock_thread.start();try:while True:pass;except KeyboardInterrupt:print("\nExiting...");exiting();
